<%- include("templates/headerloggedinPREM", { overflowVariable: '' }) %>
<style>
body {
  background-image: url('/indexBG.png');
  background-size: cover;
  background-position: top;
  background-attachment: fixed;
  min-height: 100vh;
}

@font-face {
  font-family: 'startfont';
  src: url('titlefont.ttf') format('truetype');
}

.start-font {
  font-family: 'startfont', sans-serif;
}

.whiteshadow {
  text-shadow: 3px 3px  white;
}
</style>
<h1 class="text-3xl px-4 font-bold mb-7 mx-auto text-center start-font whiteshadow">Achievements</h1>
<h2 class="text-2xl px-4 font-semibold mb-2 mx-auto text-center start-font">Unclaimed Rewards</h2>
<div class="grid p-2 max-w-md mx-auto">
  <ul>
    <% for (let i=0; i < unclaimedAchievements.length; i++) { %>
      <li
        class="pl-7 pr-6 text-md flex items-center justify-between max-w-md mx-auto bg-cover bg-center py-3 cursor-pointer"
        onclick="showModal(this)"
        style="background-image: url('/username-box.png');">
        <img class="w-12 h-12 rounded-full bg-white border-4 border-gray-500 cursor-pointer"
          src="../trophy.png" alt="trophy">
        <span class="text-gray-900 mx-auto text-2xl">
          <%- unclaimedAchievements[i].name %>
        </span>
        <div class="flex items-center">
          <img src="diamond.png" class="w-6 h-6">
          <span class="ml-1 text-gray-900 text-2xl">
            <%= unclaimedAchievements[i].reward %>
          </span>
        </div>
      </li>
    <% } %>
  </ul>
</div>
<h2 class="text-2xl px-4 font-semibold mb-2 mx-auto text-center start-font">Claimed Rewards</h2>
<div class="grid p-2 max-w-md mx-auto">
  <ul>
    <% for (let i=0; i < claimedAchievements.length; i++) { %>
      <li
        class="pl-7 pr-6 text-md flex items-center justify-between max-w-md mx-auto bg-cover bg-center py-3 cursor-pointer"
        onclick="showModal(this)"
        style="background-image: url('/username-box.png');">
        <img class="w-12 h-12 rounded-full bg-white border-4 border-gray-500 cursor-pointer"
          src="../trophy.png" alt="trophy">
        <span class="text-gray-900 mx-auto text-2xl">
          <%- claimedAchievements[i].name %>
        </span>
        <div class="flex items-center">
          <img src="diamond.png" class="w-6 h-6">
          <span class="ml-1 text-gray-900 text-2xl">
            <%= claimedAchievements[i].reward %>
          </span>
        </div>
      </li>
    <% } %>
  </ul>
</div>

<!-- Reusable Tailwind Modal -->
<div id="errorModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50 hidden">
  <div class="bg-white rounded-lg p-8 text-center">
    <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
      <svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </div>
    <h2 class="text-xl basicPixel mb-4">Error</h2>
    <p id="errorMessage" class="text-sm text-gray-500 mb-4">You do not have enough currency to buy this item.</p>
    <div class="flex justify-center space-x-4">
      <button onclick="hideErrorModal()" class="basicPixel px-4 py-2 bg-red-600 text-white rounded-lg">Close</button>
    </div>
  </div>
</div>

<%- include("templates/footer") %>

<script>
function showModal(obj) {
  obj.nextElementSibling.classList.remove('hidden');
}

function hideModal(obj) {
  const modal = obj.closest('.fixed');
  if (modal) {
    modal.classList.add('hidden');
  }
}

function buyItem(item, price, button) {
  const slotsCurrency = parseInt('<%= slotsCurrency %>');

  hideModal(button); // Hide the current modal before proceeding

  if (slotsCurrency >= price) {
    fetch('/buyItem', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        item: item,
        price: price
      })
    }).then((response) => {
      if (response.ok) {
        window.location.href = '/profile?from=prem';
      } else {
        response.json().then(data => {
          if (data.error === 'Not enough currency') {
            showErrorModal("You do not have enough currency to buy this item.");
          } else {
            showErrorModal(data.error || 'An unexpected error occurred.');
          }
        }).catch(() => {
          showErrorModal('An unexpected error occurred.');
        });
      }
    }).catch(() => {
      showErrorModal('An unexpected error occurred.');
    });
  } else {
    showErrorModal("You do not have enough currency to buy this item.");
  }
}

function showErrorModal(message) {
  const modalMessage = document.getElementById('errorMessage');
  modalMessage.textContent = message;
  const modal = document.getElementById('errorModal');
  modal.classList.remove('hidden');
}

function hideErrorModal() {
  console.log('Hiding error modal');
  const modal = document.getElementById('errorModal');
  modal.classList.add('hidden');
}

</script>