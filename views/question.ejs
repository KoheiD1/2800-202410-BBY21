<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CodeCrypt</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" type="text/css" href="/healthbar.css">
  <link rel="stylesheet" type="text/css" href="/pixelButton.css">
  <link rel="stylesheet" href="/fonts.css">
  <link rel="icon" type="image/png" href="/favicon.png">
  <link rel="stylesheet" type="text/css" href="/header.css">
  <link href="/tight.css" rel="stylesheet" type="text/css">
  <link href="/battleAnimation.css" rel="stylesheet" type="text/css">
  <link href="/question.css" rel="stylesheet" type="text/css">
</head>

<body class="flex flex-col justify-center items-center mx-auto">
  <div id="mainContainer">
    <div id="battleContainer">
      <div class="header">
        <%- include("templates/headerloggedinQUEST", { overflowVariable: 'overflow-x-hidden' }) %>
      </div>

      <div id="healthbar-left" class="health-bar-left">
        <div class="healthbar-wrapper">
          <p id="heroInfo" class="basicPixel text-sm pl-3 sshadow">
            <%=userName%>
          </p>
          <%- include('healthbar.html') %>
        </div>
      </div>

      <div id="hero-container">
        <div class="heroSVG">
          <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
            <image id="hero-image" href="/kid.svg" x="0" y="0" width="100" height="100" />
          </svg>
        </div>
      </div>

      <div id="healthbar-right" class="health-bar-right flex flex-col">
        <div class="healthbar-wrapper-right">
          <p id="enemyInfo" class="basicPixel text-sm text-right pr-1 sshadow">
          </p>
          <%- include('healthbar.html') %>
        </div>
      </div>

      <div id="enemy-container">
        <div class="enemySVG">
          <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
            <image id="enemy-image" href="<%= enemyImage %>" x="0" y="0" width="100" height="100" />
          </svg>
        </div>
      </div>
    </div>

    <div id="questionContainer">
    </div>

    <div id="feedbackContainer" class="hidden mx-auto p-8 rounded">
      <p id="modalFeedback" class="basicPixel mt-4"></p>
      <div class="flex justify-center" id="modalButtons">
        <button id="learn-more" class="pixel-button-long text-black font-bold px-2 z-10" onclick="openModal()">
          Learn More
        </button>
        <button id="closeFeedback" class="pixel-button-long text-black font-bold px-2 z-10"
          onclick="closeFeedbackFunction()">Next Question</button>
      </div>
    </div>

    <div id="learnMoreModal"
      class="fixed inset-0 z-50 overflow-auto bg-gray-900 bg-opacity-50 flex items-center justify-center hidden">
      <div class="pixel-border p-8 w-96">
        <div class="flex justify-end">
          <button onclick="closeModal()" class="font-bold text-xl hover:text-gray-700 focus:outline-none">
            <p class="basicPixel">x</p>
          </button>
        </div>
        <h2 class="basicPixel text-2xl font-bold mb-4">Learn More</h2>
        <p id="feedbackParagraph" class="basicPixel"></p>
      </div>
    </div>
  </div>

  <div id="warningModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50 hidden">
    <div class="bg-white rounded-lg p-8 text-center">
      <h2 class="text-xl basicPixel mb-4">Welcome to the battle! This is where your knowledge will get put to the test
      </h2>
      <div class="flex justify-center space-x-4">
        <button onclick="hideModal()" class="basicPixel px-4 py-2 bg-gray-300 rounded-lg">Exit</button>
      </div>
    </div>
  </div>

  <script>
    var enemyHealth = '<%= enemyHealth %>';
    var playerHealth = '<%= playerHealth %>';
    var maxEnemyHealth = '<%= maxEnemyHealth %>';
    var difficulty = "<%= difficulty %>";
    var maxPlayerHealth = '<%= maxPlayerHealth %>';

    renderHealth();

    document.getElementById('enemyInfo').textContent = "<%=enemyName%> " + "             " + enemyHealth + "/" + maxEnemyHealth;
    document.getElementById('heroInfo').textContent = "<%=userName%> " + "             " + playerHealth + "/" + maxPlayerHealth;

    async function populateQuestionContainer() {
      try {
        const response = await fetch('/getNewQuestion', {
          method: 'GET'
        });
        const question = await response.json();
        const questionTextFormatted = question.question.questionText.replace(/\n/g, '<br>');

        var questionContainer = document.getElementById('questionContainer');
        const feedbackContainer = document.getElementById('feedbackContainer');
        questionContainer.classList.remove("hidden");
        feedbackContainer.classList.add("hidden");
        document.getElementById('enemy-image').classList.remove('flash-animation');
        document.getElementById('enemy-image').classList.remove('shake-animation');

        document.getElementById('hero-image').classList.remove('flash-animation');
        document.getElementById('hero-image').classList.remove('shake-animation');

        questionContainer = document.getElementById('questionContainer');
        questionContainer.innerHTML = `
            <div class="max-w-lg mx-auto px-3 rounded  ">
              <h1 class="text-md mb-4 text-white basicPixel qShadow">${questionTextFormatted}</h1>
              <ul>
                ${question.question.options.map((option, index) => `
                  <li class="">
                    <form id="${index}" class="feedback-form" data-question-id="${question._id}">
                      <input type="hidden" name="option" value="${index}">
                      <button id="opt-btn" class="w-full pixel-button-long text-black">${option.text}</button>
                    </form>
                    <div id="feedbackResult${index}"></div>
                  </li>
                `).join('')}
              </ul>
            </div>
          `;

        attachFeedbackListeners(question.question);
      } catch (error) {
        console.error('Error:', error);
      }
    }

    function displayFeedback(correct, feedbackText) {
      const questionContainer = document.getElementById('questionContainer');
      const feedbackContainer = document.getElementById('feedbackContainer');

      // Hide the question container and show the feedback container
      questionContainer.classList.add("hidden");
      feedbackContainer.classList.remove("hidden");

      const modalFeedback = document.getElementById("modalFeedback");
      modalFeedback.innerHTML = '';

      const h2Element = document.createElement('h2');
      h2Element.textContent = correct ? "Correct" : "Wrong";
      h2Element.style.fontSize = "2rem";
      h2Element.style.textAlign = "center";
      h2Element.style.marginTop = "1rem";
      h2Element.style.color = "white";
      h2Element.style.fontFamily = "basicPixel";

      modalFeedback.appendChild(h2Element);

      const feedbackParagraph = document.createElement('p');
      feedbackParagraph.textContent = feedbackText;

      if (correct) {

        console.log("Correct");
        updateTotalDamage();

        if (enemyHealth < 0) {
          enemyHealth = 0;
        }
        document.getElementById('enemy-image').classList.add('flash-animation');
        document.getElementById('enemy-image').classList.add('shake-animation');
        document.getElementById('enemyInfo').textContent = "<%=enemyName%> " + "      " + enemyHealth + "/" + maxEnemyHealth;
      } else {

        console.log("Wrong");

        if (playerHealth < 0) {
          playerHealth = 0;
        }
        document.getElementById('hero-image').classList.add('flash-animation');
        document.getElementById('hero-image').classList.add('shake-animation');
        document.getElementById('heroInfo').textContent = "<%=userName%> " + "      " + playerHealth + "/" + maxPlayerHealth;
      }
    }

    function closeFeedbackFunction() {

      if (enemyHealth <= 0 && difficulty != "hexagon") {
        window.location.href = '/victory';
      } else if (playerHealth <= 0) {
        window.location.href = '/defeat';
      } else if (enemyHealth <= 0 && difficulty == "hexagon") {
        window.location.href = '/levelup';
      }
      else {
        populateQuestionContainer();
      }
    }

    function attachFeedbackListeners(question) {
      document.querySelectorAll('.feedback-form button').forEach(button => {
        button.addEventListener('click', function (event) {
          // Prevent default button behavior (form submission)
          event.preventDefault();

          const optionIndex = button.parentElement.querySelector('input[name="option"]').value;
          const questionID = question._id;

          fetch('/feedback', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ optionIndex: optionIndex, questionID: questionID })
          })
            .then(response => response.json())
            .then(data => {
              console.log('Feedback:', data.feedback);
              enemyHealth = data.enemyHealth;
              playerHealth = data.playerHealth;
              maxEnemyHealth = data.maxEnemyHealth;
              difficulty = data.difficulty;
              maxPlayerHealth = data.maxPlayerHealth;

              displayFeedback(data.result, data.feedback);

              feedback = data.feedback;

              renderHealth();
            })
            .catch(error => {
              console.error('Error:', error);
            });
        });
      });
    }

    populateQuestionContainer();

    function renderHealth() {
      var healthbarLeft = document.getElementById("healthbar-left");
      var healthbarRight = document.getElementById("healthbar-right");
      var fillsLeft = healthbarLeft.querySelectorAll(".healthbar_fill");
      var fillsRight = healthbarRight.querySelectorAll(".healthbar_fill");
      console.log(playerHealth, enemyHealth);
      var healthLeft = playerHealth;
      var healthRight = enemyHealth;
      var enemyMaxHP = maxEnemyHealth;

      var maxHp = maxPlayerHealth;
      console.log("Max HP: ", maxHp);

      var percentLeft = healthLeft / maxHp * 100;
      var percentRight = healthRight / enemyMaxHP * 100;
      var leftFill = healthbarLeft.querySelector(".healthbar_fill");
      var rightFill = healthbarRight.querySelector(".healthbar_fill");
      leftFill.style.width = percentLeft + "%";
      rightFill.style.width = percentRight + "%";

      // Update color
      document.documentElement.style.setProperty('--bar-fill', '#57e705');
      document.documentElement.style.setProperty('--bar-top', '#6aff03');

      // Update color for left health bar
      if (percentLeft <= 50) { // Yellows
        document.documentElement.style.setProperty('--bar-fill-left', '#d6ed20');
        document.documentElement.style.setProperty('--bar-top-left', '#d8ff48');
      }
      if (percentLeft <= 25) { // Reds
        document.documentElement.style.setProperty('--bar-fill-left', '#ec290a');
        document.documentElement.style.setProperty('--bar-top-left', '#ff3818');
      }

      // Update color for right health bar
      if (percentRight <= 50) { // Yellows
        document.documentElement.style.setProperty('--bar-fill-right', '#d6ed20');
        document.documentElement.style.setProperty('--bar-top-right', '#d8ff48');
      }
      if (percentRight <= 25) { // Reds
        document.documentElement.style.setProperty('--bar-fill-right', '#ec290a');
        document.documentElement.style.setProperty('--bar-top-right', '#ff3818');
      }

      fillsLeft.forEach(fill => {
        fill.style.width = percentLeft + "%";
      });

      fillsRight.forEach(fill => {
        fill.style.width = percentRight + "%";
      });
      console.log("Player: " + percentLeft + ", Enemy: " + percentRight);
    }

    function updateTotalDamage() {
      var playerDMG = '<%= playerDMG %>';
      console.log("Player Damagegg: ", playerDMG);

      fetch('/updateTotalDamage', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ playerDMG: playerDMG })
      })
        .then(response => response.json())
        .then(data => {
          console.log("Total Damage: ", data.totalDamage);
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }

    // Open the modal
    function openModal() {
      var modal = document.getElementById("learnMoreModal");
      var feedbackParagraph = modal.querySelector("#feedbackParagraph");
      feedbackParagraph.textContent = feedback; // Update the feedback content
      modal.classList.remove("hidden");
    }

    // Close the modal
    function closeModal() {
      var modal = document.getElementById("learnMoreModal");
      modal.classList.add("hidden");
    }

  </script>
</body>
<%- include("templates/footer") %>